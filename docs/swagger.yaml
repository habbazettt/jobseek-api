basePath: /api/v1
definitions:
  dto.JobRequest:
    properties:
      category:
        type: string
      currency:
        enum:
        - IDR
        - USD
        - EUR
        type: string
      deadline:
        type: string
      description:
        type: string
      experience_level:
        enum:
        - junior
        - mid
        - senior
        type: string
      job_type:
        enum:
        - full-time
        - part-time
        - freelance
        - internship
        type: string
      location:
        type: string
      salary:
        minimum: 0
        type: integer
      skills:
        items:
          type: string
        type: array
      title:
        type: string
    required:
    - category
    - currency
    - deadline
    - description
    - experience_level
    - job_type
    - location
    - salary
    - skills
    - title
    type: object
  dto.JobResponse:
    properties:
      category:
        type: string
      company_id:
        type: integer
      created_at:
        type: string
      currency:
        type: string
      deadline:
        type: string
      description:
        type: string
      experience_level:
        type: string
      id:
        type: integer
      job_type:
        type: string
      location:
        type: string
      salary:
        type: integer
      skills:
        items:
          type: string
        type: array
      status:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      data:
        $ref: '#/definitions/dto.UserResponse'
      message:
        type: string
      status:
        type: string
      token:
        type: string
    type: object
  dto.RegisterRequest:
    properties:
      avatar_url:
        type: string
      email:
        type: string
      full_name:
        maxLength: 100
        minLength: 3
        type: string
      password:
        maxLength: 50
        minLength: 8
        type: string
      phone:
        type: string
      role:
        enum:
        - admin
        - freelancer
        - perusahaan
        type: string
    required:
    - email
    - full_name
    - password
    - role
    type: object
  dto.UpdateJobRequest:
    properties:
      category:
        type: string
      currency:
        enum:
        - IDR
        - USD
        - EUR
        type: string
      deadline:
        type: string
      description:
        type: string
      experience_level:
        enum:
        - junior
        - mid
        - senior
        type: string
      job_type:
        enum:
        - full-time
        - part-time
        - freelance
        - internship
        type: string
      location:
        type: string
      salary:
        type: integer
      skills:
        items:
          type: string
        type: array
      status:
        type: string
      title:
        type: string
    type: object
  dto.UserResponse:
    properties:
      avatar_url:
        type: string
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: integer
      phone:
        type: string
      role:
        type: string
      updated_at:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API untuk manajemen pencari kerja dan lowongan pekerjaan.
  title: JobSeeker API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login user, only available for guest
      parameters:
      - description: Login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Login user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register new user, only available for guest
      parameters:
      - description: Register request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Register new user
      tags:
      - auth
  /jobs:
    get:
      consumes:
      - application/json
      description: Get list of jobs with pagination and filtering
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Limit per page
        in: query
        name: limit
        type: integer
      - description: Search query
        in: query
        name: search_query
        type: string
      - description: Job category
        in: query
        name: category
        type: string
      - description: Job location
        in: query
        name: location
        type: string
      - description: Job experience level
        in: query
        name: experience_level
        type: string
      - description: Minimum salary
        in: query
        name: min_salary
        type: integer
      - description: Maximum salary
        in: query
        name: max_salary
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.JobResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get list of jobs
      tags:
      - jobs
    post:
      consumes:
      - application/json
      description: Tambahkan pekerjaan baru
      parameters:
      - description: Job request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.JobRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.JobResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Tambahkan pekerjaan baru
      tags:
      - jobs
  /jobs/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a job based on the provided job ID. Only the job owner or
        an admin
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete Job
      tags:
      - jobs
    get:
      consumes:
      - application/json
      description: Get Job By ID
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.JobResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get Job By ID
      tags:
      - jobs
    put:
      consumes:
      - application/json
      description: Update job details based on the provided job ID. Only the job owner
        or an admin
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: integer
      - description: Job request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateJobRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.JobResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update Job
      tags:
      - jobs
  /users:
    get:
      consumes:
      - application/json
      description: Get All Users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.UserResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get All Users
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user based on the provided user ID. Only the account owner
        or an admin
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete User
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get User By ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get User By ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user details based on the provided user ID. Only the account
        owner or an admin
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User Avatar
        in: formData
        name: photo
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update User
      tags:
      - users
  /users/me:
    get:
      consumes:
      - application/json
      description: Get Current User
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get Current User
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Masukkan token dalam format "Bearer <token>"
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
