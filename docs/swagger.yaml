basePath: /api/v1
definitions:
  dto.AverageRatingResponse:
    properties:
      average_rating:
        type: number
      reviewed_id:
        type: integer
      total_reviews:
        type: integer
    type: object
  dto.CreateProposalRequest:
    properties:
      bid_amount:
        minimum: 0
        type: integer
      cover_letter:
        minLength: 10
        type: string
      currency:
        enum:
        - IDR
        - USD
        - EUR
        type: string
      job_id:
        type: integer
    required:
    - bid_amount
    - cover_letter
    - currency
    - job_id
    type: object
  dto.CreateReviewRequest:
    properties:
      comment:
        type: string
      rating:
        maximum: 5
        minimum: 1
        type: number
      reviewed_id:
        description: ID User yang akan diberikan review
        type: integer
    required:
    - comment
    - rating
    - reviewed_id
    type: object
  dto.JobRequest:
    properties:
      category:
        type: string
      currency:
        enum:
        - IDR
        - USD
        - EUR
        type: string
      deadline:
        type: string
      description:
        type: string
      experience_level:
        enum:
        - junior
        - mid
        - senior
        type: string
      job_type:
        enum:
        - full-time
        - part-time
        - freelance
        - internship
        type: string
      location:
        type: string
      salary:
        minimum: 0
        type: integer
      skills:
        items:
          type: string
        type: array
      title:
        type: string
    required:
    - category
    - currency
    - deadline
    - description
    - experience_level
    - job_type
    - location
    - salary
    - skills
    - title
    type: object
  dto.JobResponse:
    properties:
      category:
        type: string
      company_id:
        type: integer
      created_at:
        type: string
      currency:
        type: string
      deadline:
        type: string
      description:
        type: string
      experience_level:
        type: string
      id:
        type: integer
      job_type:
        type: string
      location:
        type: string
      salary:
        type: integer
      skills:
        items:
          type: string
        type: array
      status:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      data:
        $ref: '#/definitions/dto.UserResponse'
      message:
        type: string
      status:
        type: string
      token:
        type: string
    type: object
  dto.MessageRequest:
    properties:
      message:
        type: string
      receiver_id:
        type: integer
    required:
    - message
    - receiver_id
    type: object
  dto.ProposalResponse:
    properties:
      bid_amount:
        type: integer
      cover_letter:
        type: string
      created_at:
        type: string
      currency:
        type: string
      freelancer:
        type: string
      freelancer_id:
        type: integer
      id:
        type: integer
      job_id:
        type: integer
      job_title:
        type: string
      status:
        type: string
    type: object
  dto.RegisterRequest:
    properties:
      avatar_url:
        type: string
      email:
        type: string
      full_name:
        maxLength: 100
        minLength: 3
        type: string
      password:
        maxLength: 50
        minLength: 8
        type: string
      phone:
        type: string
      role:
        enum:
        - admin
        - freelancer
        - perusahaan
        type: string
    required:
    - email
    - full_name
    - password
    - role
    type: object
  dto.ReviewResponse:
    properties:
      comment:
        type: string
      created_at:
        type: string
      id:
        type: integer
      rating:
        type: number
      reviewed_id:
        type: integer
      reviewer_id:
        type: integer
    type: object
  dto.SavedFreelancerResponse:
    properties:
      created_at:
        type: string
      freelancer_id:
        type: integer
      full_name:
        type: string
      id:
        type: integer
    type: object
  dto.SavedJobResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      job_id:
        type: integer
      job_title:
        type: string
    type: object
  dto.UpdateJobRequest:
    properties:
      category:
        type: string
      currency:
        enum:
        - IDR
        - USD
        - EUR
        type: string
      deadline:
        type: string
      description:
        type: string
      experience_level:
        enum:
        - junior
        - mid
        - senior
        type: string
      job_type:
        enum:
        - full-time
        - part-time
        - freelance
        - internship
        type: string
      location:
        type: string
      salary:
        type: integer
      skills:
        items:
          type: string
        type: array
      status:
        type: string
      title:
        type: string
    type: object
  dto.UpdateReviewRequest:
    properties:
      comment:
        type: string
      rating:
        maximum: 5
        minimum: 1
        type: number
    required:
    - comment
    - rating
    type: object
  dto.UserResponse:
    properties:
      avatar_url:
        type: string
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: integer
      phone:
        type: string
      role:
        type: string
      updated_at:
        type: string
    type: object
  models.ChatMessage:
    properties:
      created_at:
        type: string
      id:
        type: integer
      message:
        type: string
      receiver_id:
        type: integer
      sender_id:
        type: integer
    type: object
  models.Notification:
    properties:
      created_at:
        type: string
      id:
        type: integer
      is_read:
        type: boolean
      message:
        type: string
      user_id:
        type: integer
    type: object
  utils.ErrorResponseSwagger:
    properties:
      data: {}
      message:
        type: string
      status:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API untuk manajemen jobseeker
  title: Jobseeker Management API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login user, only available for guest
      parameters:
      - description: Login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User logged in successfully
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "401":
          description: Invalid email or password
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "500":
          description: Failed to login user
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      summary: Login user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register new user, only available for guest
      parameters:
      - description: Register request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "500":
          description: Error saving user
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      summary: Register new user
      tags:
      - auth
  /chat/messages:
    get:
      consumes:
      - application/json
      description: Get messages by sender and receiver
      parameters:
      - description: Sender ID
        in: query
        name: sender_id
        type: integer
      - description: Receiver ID
        in: query
        name: receiver_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Messages retrieved successfully
          schema:
            items:
              $ref: '#/definitions/models.ChatMessage'
            type: array
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "401":
          description: 'Unauthorized: No user ID found in token'
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "500":
          description: Failed to retrieve messages
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Get Messages
      tags:
      - chat
  /chat/my-messages:
    get:
      consumes:
      - application/json
      description: Get messages by current user
      produces:
      - application/json
      responses:
        "200":
          description: User messages retrieved successfully
          schema:
            items:
              $ref: '#/definitions/models.ChatMessage'
            type: array
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "401":
          description: 'Unauthorized: No user ID found in token'
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "500":
          description: Failed to retrieve messages
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Get My Messages
      tags:
      - chat
  /chat/send_message:
    post:
      consumes:
      - application/json
      description: Send a message to another user
      parameters:
      - description: Message request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.MessageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Message sent successfully
          schema:
            $ref: '#/definitions/models.ChatMessage'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "401":
          description: 'Unauthorized: No user ID found in token'
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "500":
          description: Failed to send message
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Send Message
      tags:
      - chat
  /jobs:
    get:
      consumes:
      - application/json
      description: Get list of jobs with pagination and filtering
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Limit per page
        in: query
        name: limit
        type: integer
      - description: Search query
        in: query
        name: search_query
        type: string
      - description: Job category
        in: query
        name: category
        type: string
      - description: Job location
        in: query
        name: location
        type: string
      - description: Job experience level
        in: query
        name: experience_level
        type: string
      - description: Minimum salary
        in: query
        name: min_salary
        type: integer
      - description: Maximum salary
        in: query
        name: max_salary
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Jobs retrieved successfully
          schema:
            $ref: '#/definitions/dto.JobResponse'
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "500":
          description: Failed to retrieve jobs
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Get list of jobs
      tags:
      - jobs
    post:
      consumes:
      - application/json
      description: Create a new job
      parameters:
      - description: Job request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.JobRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Job created successfully
          schema:
            $ref: '#/definitions/dto.JobResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "403":
          description: Only companies can create jobs
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "500":
          description: Failed to create job
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      summary: Create a new job
      tags:
      - jobs
  /jobs/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a job based on the provided job ID. Only the job owner or
        an admin
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Job deleted successfully
          schema:
            $ref: '#/definitions/dto.JobResponse'
        "400":
          description: Invalid job ID
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "403":
          description: 'Forbidden: Only companies can delete jobs'
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "500":
          description: Failed to delete job
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Delete Job
      tags:
      - jobs
    get:
      consumes:
      - application/json
      description: Get Job By ID
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Job retrieved successfully
          schema:
            $ref: '#/definitions/dto.JobResponse'
        "400":
          description: Invalid job ID
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "404":
          description: Job not found
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "500":
          description: Failed to retrieve job
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Get Job By ID
      tags:
      - jobs
    put:
      consumes:
      - application/json
      description: Update job details based on the provided job ID. Only the job owner
        or an admin
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: integer
      - description: Job request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateJobRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Job updated successfully
          schema:
            $ref: '#/definitions/dto.JobResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "403":
          description: Only companies can update jobs
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "500":
          description: Failed to update job
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Update Job
      tags:
      - jobs
  /notifications/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a notification by ID.
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Notification deleted successfully
          schema:
            $ref: '#/definitions/models.Notification'
        "400":
          description: Invalid notification ID
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "404":
          description: Notification not found
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "500":
          description: Failed to delete notification
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Delete Notification
      tags:
      - notifications
  /notifications/delete-all:
    delete:
      consumes:
      - application/json
      description: Deletes all notifications associated with the logged-in user.
      produces:
      - application/json
      responses:
        "200":
          description: All notifications deleted successfully
          schema:
            items:
              $ref: '#/definitions/models.Notification'
            type: array
        "500":
          description: Failed to delete all notifications
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Delete All Notifications
      tags:
      - notifications
  /notifications/read-all:
    patch:
      consumes:
      - application/json
      description: Marks all notifications associated with the logged-in user as read.
      produces:
      - application/json
      responses:
        "200":
          description: All notifications marked as read
          schema:
            items:
              $ref: '#/definitions/models.Notification'
            type: array
        "500":
          description: Failed to mark all notifications as read
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Mark All Notifications As Read
      tags:
      - notifications
  /proposals:
    post:
      consumes:
      - application/json
      description: Create a new proposal for a job
      parameters:
      - description: Proposal data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProposalRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Proposal submitted successfully
          schema:
            $ref: '#/definitions/dto.ProposalResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "403":
          description: Only freelancers can apply for jobs
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "500":
          description: Failed to submit proposal
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Create Proposal
      tags:
      - proposals
  /proposals/{job_id}:
    get:
      consumes:
      - application/json
      description: Get all proposals for a job
      parameters:
      - description: Job ID
        in: path
        name: job_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Proposals retrieved successfully
          schema:
            items:
              $ref: '#/definitions/dto.ProposalResponse'
            type: array
        "400":
          description: Invalid job ID
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "403":
          description: Only companies can view proposals
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "500":
          description: Failed to retrieve proposals
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Get Proposals By Job ID
      tags:
      - proposals
  /proposals/{proposal_id}:
    delete:
      consumes:
      - application/json
      description: Delete a proposal that you submitted
      parameters:
      - description: Proposal ID
        in: path
        name: proposal_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Proposal deleted successfully
          schema:
            $ref: '#/definitions/dto.ProposalResponse'
        "400":
          description: Invalid proposal ID
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "403":
          description: Only freelancers can delete their proposals
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "500":
          description: Failed to delete proposal
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Delete Proposal
      tags:
      - proposals
  /proposals/me:
    get:
      consumes:
      - application/json
      description: Get all proposals submitted by a freelancer
      produces:
      - application/json
      responses:
        "200":
          description: Proposals retrieved successfully
          schema:
            items:
              $ref: '#/definitions/dto.ProposalResponse'
            type: array
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "403":
          description: Only freelancers can view their proposals
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "500":
          description: Failed to retrieve proposals
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Get Proposals By Freelancer
      tags:
      - proposals
  /reviews:
    post:
      consumes:
      - application/json
      description: Create a new review. Only authenticated reviewer can create a review.
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateReviewRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Review created successfully
          schema:
            $ref: '#/definitions/dto.ReviewResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Create a new review
      tags:
      - reviews
  /reviews/{review_id}:
    delete:
      consumes:
      - application/json
      description: Delete a review. Only the reviewer who submitted the review
      parameters:
      - description: Review ID
        in: path
        name: review_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Review deleted successfully
          schema:
            $ref: '#/definitions/dto.ReviewResponse'
        "400":
          description: Invalid review ID
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "401":
          description: 'Unauthorized: You can only delete your own reviews'
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Delete Review
      tags:
      - reviews
    put:
      consumes:
      - application/json
      description: Update an existing review. Only the reviewer who submitted the
      parameters:
      - description: Review ID
        in: path
        name: review_id
        required: true
        type: integer
      - description: Review details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateReviewRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Review updated successfully
          schema:
            $ref: '#/definitions/dto.ReviewResponse'
        "400":
          description: Invalid review ID
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "401":
          description: 'Unauthorized: You can only update your own reviews'
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Update Review
      tags:
      - reviews
  /reviews/average/{user_id}:
    get:
      consumes:
      - application/json
      description: Retrieve the average rating of a user.
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Average rating retrieved successfully
          schema:
            $ref: '#/definitions/dto.AverageRatingResponse'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Get Average Rating
      tags:
      - reviews
  /reviews/me:
    get:
      consumes:
      - application/json
      description: Retrieve all reviews submitted by the currently authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: Reviews retrieved successfully
          schema:
            items:
              $ref: '#/definitions/dto.ReviewResponse'
            type: array
        "401":
          description: 'Unauthorized: No user ID found in token'
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Get My Reviews
      tags:
      - reviews
  /saved/freelancers:
    get:
      consumes:
      - application/json
      description: Get list of freelancers saved by the company. Only companies can
        perform this action.
      produces:
      - application/json
      responses:
        "200":
          description: Freelancers retrieved successfully
          schema:
            items:
              $ref: '#/definitions/dto.SavedFreelancerResponse'
            type: array
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "403":
          description: 'Forbidden: Only companies can view saved freelancers'
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "500":
          description: Failed to retrieve freelancers
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Get Saved Freelancers
      tags:
      - saved
  /saved/freelancers/{freelancer_id}:
    delete:
      consumes:
      - application/json
      description: Remove a freelancer from the company's saved freelancers. Only
        companies can perform this action.
      parameters:
      - description: Freelancer ID
        in: path
        name: freelancer_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Freelancer removed from saved list successfully
          schema:
            $ref: '#/definitions/dto.SavedFreelancerResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "403":
          description: 'Forbidden: Only companies can remove saved freelancers'
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "500":
          description: Failed to remove saved freelancer
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Remove Saved Freelancer
      tags:
      - saved
  /saved/jobs:
    get:
      consumes:
      - application/json
      description: Get list of jobs saved by the freelancer. Only freelancers can
        perform this action.
      produces:
      - application/json
      responses:
        "200":
          description: Jobs retrieved successfully
          schema:
            items:
              $ref: '#/definitions/dto.SavedJobResponse'
            type: array
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "403":
          description: 'Forbidden: Only freelancers can view saved jobs'
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "500":
          description: Failed to retrieve jobs
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Get Saved Jobs
      tags:
      - saved
  /saved/jobs/{job_id}:
    delete:
      consumes:
      - application/json
      description: Remove a job from the freelancer's saved jobs. Only freelancers
        can perform this action.
      parameters:
      - description: Job ID
        in: path
        name: job_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Job removed from saved list successfully
          schema:
            $ref: '#/definitions/dto.SavedJobResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "403":
          description: 'Forbidden: Only freelancers can remove saved jobs'
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "500":
          description: Failed to remove saved job
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Remove Saved Job
      tags:
      - saved
    post:
      consumes:
      - application/json
      description: Save a job to the freelancer's saved jobs. Only freelancers can
        perform this action.
      parameters:
      - description: Job ID
        in: path
        name: job_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Job saved successfully
          schema:
            $ref: '#/definitions/dto.SavedJobResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "403":
          description: 'Forbidden: Only freelancers can save jobs'
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "500":
          description: Failed to save job
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Save Job
      tags:
      - saved
  /users:
    get:
      consumes:
      - application/json
      description: Get All Users
      produces:
      - application/json
      responses:
        "200":
          description: Users retrieved successfully
          schema:
            items:
              $ref: '#/definitions/dto.UserResponse'
            type: array
        "500":
          description: Failed to retrieve users
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Get All Users
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user based on the provided user ID. Only the account owner
        or an admin
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "403":
          description: Unauthorized to delete this user
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "500":
          description: Failed to delete user
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Delete User
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get User By ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User retrieved successfully
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Get User By ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user details based on the provided user ID. Only the account
        owner or an admin
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User Avatar
        in: formData
        name: photo
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "403":
          description: Unauthorized to update this user
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "500":
          description: Failed to update user
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Update User
      tags:
      - users
  /users/me:
    get:
      consumes:
      - application/json
      description: Get Current User
      produces:
      - application/json
      responses:
        "200":
          description: User retrieved successfully
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Get Current User
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Masukkan token dalam format "Bearer <token>"
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
