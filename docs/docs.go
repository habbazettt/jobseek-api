// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Login user, only available for guest",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "Login request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User logged in successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "401": {
                        "description": "Invalid email or password",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "500": {
                        "description": "Failed to login user",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Register new user, only available for guest",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register new user",
                "parameters": [
                    {
                        "description": "Register request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "500": {
                        "description": "Error saving user",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    }
                }
            }
        },
        "/chat/messages": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get messages by sender and receiver",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chat"
                ],
                "summary": "Get Messages",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Sender ID",
                        "name": "sender_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Receiver ID",
                        "name": "receiver_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Messages retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ChatMessage"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: No user ID found in token",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve messages",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    }
                }
            }
        },
        "/chat/my-messages": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get messages by current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chat"
                ],
                "summary": "Get My Messages",
                "responses": {
                    "200": {
                        "description": "User messages retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ChatMessage"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: No user ID found in token",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve messages",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    }
                }
            }
        },
        "/chat/send_message": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Send a message to another user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chat"
                ],
                "summary": "Send Message",
                "parameters": [
                    {
                        "description": "Message request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.MessageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message sent successfully",
                        "schema": {
                            "$ref": "#/definitions/models.ChatMessage"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: No user ID found in token",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "500": {
                        "description": "Failed to send message",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    }
                }
            }
        },
        "/jobs": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get list of jobs with pagination and filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jobs"
                ],
                "summary": "Get list of jobs",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "search_query",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Job category",
                        "name": "category",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Job location",
                        "name": "location",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Job experience level",
                        "name": "experience_level",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Minimum salary",
                        "name": "min_salary",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Maximum salary",
                        "name": "max_salary",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Jobs retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.JobResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve jobs",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new job",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jobs"
                ],
                "summary": "Create a new job",
                "parameters": [
                    {
                        "description": "Job request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.JobRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Job created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.JobResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "403": {
                        "description": "Only companies can create jobs",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "500": {
                        "description": "Failed to create job",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    }
                }
            }
        },
        "/jobs/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get Job By ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jobs"
                ],
                "summary": "Get Job By ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Job ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Job retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.JobResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid job ID",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "404": {
                        "description": "Job not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve job",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update job details based on the provided job ID. Only the job owner or an admin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jobs"
                ],
                "summary": "Update Job",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Job ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Job request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateJobRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Job updated successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.JobResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "403": {
                        "description": "Only companies can update jobs",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "500": {
                        "description": "Failed to update job",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a job based on the provided job ID. Only the job owner or an admin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jobs"
                ],
                "summary": "Delete Job",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Job ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Job deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.JobResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid job ID",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "403": {
                        "description": "Forbidden: Only companies can delete jobs",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "500": {
                        "description": "Failed to delete job",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    }
                }
            }
        },
        "/notifications/delete-all": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes all notifications associated with the logged-in user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Delete All Notifications",
                "responses": {
                    "200": {
                        "description": "All notifications deleted successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Notification"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to delete all notifications",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    }
                }
            }
        },
        "/notifications/read-all": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Marks all notifications associated with the logged-in user as read.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Mark All Notifications As Read",
                "responses": {
                    "200": {
                        "description": "All notifications marked as read",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Notification"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to mark all notifications as read",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    }
                }
            }
        },
        "/notifications/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a notification by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Delete Notification",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Notification ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notification deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Notification"
                        }
                    },
                    "400": {
                        "description": "Invalid notification ID",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "404": {
                        "description": "Notification not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "500": {
                        "description": "Failed to delete notification",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    }
                }
            }
        },
        "/proposals": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new proposal for a job",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "proposals"
                ],
                "summary": "Create Proposal",
                "parameters": [
                    {
                        "description": "Proposal data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateProposalRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Proposal submitted successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.ProposalResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "403": {
                        "description": "Only freelancers can apply for jobs",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "500": {
                        "description": "Failed to submit proposal",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    }
                }
            }
        },
        "/proposals/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all proposals submitted by a freelancer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "proposals"
                ],
                "summary": "Get Proposals By Freelancer",
                "responses": {
                    "200": {
                        "description": "Proposals retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.ProposalResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "403": {
                        "description": "Only freelancers can view their proposals",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve proposals",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    }
                }
            }
        },
        "/proposals/{job_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all proposals for a job",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "proposals"
                ],
                "summary": "Get Proposals By Job ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Job ID",
                        "name": "job_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Proposals retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.ProposalResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid job ID",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "403": {
                        "description": "Only companies can view proposals",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve proposals",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    }
                }
            }
        },
        "/proposals/{proposal_id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a proposal that you submitted",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "proposals"
                ],
                "summary": "Delete Proposal",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Proposal ID",
                        "name": "proposal_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Proposal deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.ProposalResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid proposal ID",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "403": {
                        "description": "Only freelancers can delete their proposals",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "500": {
                        "description": "Failed to delete proposal",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    }
                }
            }
        },
        "/reviews": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new review. Only authenticated reviewer can create a review.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "Create a new review",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateReviewRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Review created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.ReviewResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    }
                }
            }
        },
        "/reviews/average/{user_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve the average rating of a user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "Get Average Rating",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Average rating retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.AverageRatingResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    }
                }
            }
        },
        "/reviews/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve all reviews submitted by the currently authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "Get My Reviews",
                "responses": {
                    "200": {
                        "description": "Reviews retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.ReviewResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: No user ID found in token",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    }
                }
            }
        },
        "/reviews/{review_id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing review. Only the reviewer who submitted the",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "Update Review",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Review ID",
                        "name": "review_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Review details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateReviewRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Review updated successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.ReviewResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid review ID",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: You can only update your own reviews",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a review. Only the reviewer who submitted the review",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "Delete Review",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Review ID",
                        "name": "review_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Review deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.ReviewResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid review ID",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: You can only delete your own reviews",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    }
                }
            }
        },
        "/saved/freelancers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get list of freelancers saved by the company. Only companies can perform this action.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "saved"
                ],
                "summary": "Get Saved Freelancers",
                "responses": {
                    "200": {
                        "description": "Freelancers retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.SavedFreelancerResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "403": {
                        "description": "Forbidden: Only companies can view saved freelancers",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve freelancers",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    }
                }
            }
        },
        "/saved/freelancers/{freelancer_id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove a freelancer from the company's saved freelancers. Only companies can perform this action.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "saved"
                ],
                "summary": "Remove Saved Freelancer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Freelancer ID",
                        "name": "freelancer_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Freelancer removed from saved list successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.SavedFreelancerResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "403": {
                        "description": "Forbidden: Only companies can remove saved freelancers",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "500": {
                        "description": "Failed to remove saved freelancer",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    }
                }
            }
        },
        "/saved/jobs": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get list of jobs saved by the freelancer. Only freelancers can perform this action.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "saved"
                ],
                "summary": "Get Saved Jobs",
                "responses": {
                    "200": {
                        "description": "Jobs retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.SavedJobResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "403": {
                        "description": "Forbidden: Only freelancers can view saved jobs",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve jobs",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    }
                }
            }
        },
        "/saved/jobs/{job_id}": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Save a job to the freelancer's saved jobs. Only freelancers can perform this action.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "saved"
                ],
                "summary": "Save Job",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Job ID",
                        "name": "job_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Job saved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.SavedJobResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "403": {
                        "description": "Forbidden: Only freelancers can save jobs",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "500": {
                        "description": "Failed to save job",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove a job from the freelancer's saved jobs. Only freelancers can perform this action.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "saved"
                ],
                "summary": "Remove Saved Job",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Job ID",
                        "name": "job_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Job removed from saved list successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.SavedJobResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "403": {
                        "description": "Forbidden: Only freelancers can remove saved jobs",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "500": {
                        "description": "Failed to remove saved job",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get All Users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get All Users",
                "responses": {
                    "200": {
                        "description": "Users retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.UserResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve users",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    }
                }
            }
        },
        "/users/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get Current User",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get Current User",
                "responses": {
                    "200": {
                        "description": "User retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.UserResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get User By ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get User By ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update user details based on the provided user ID. Only the account owner or an admin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update User",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "User Avatar",
                        "name": "photo",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "403": {
                        "description": "Unauthorized to update this user",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "500": {
                        "description": "Failed to update user",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a user based on the provided user ID. Only the account owner or an admin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete User",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "403": {
                        "description": "Unauthorized to delete this user",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    },
                    "500": {
                        "description": "Failed to delete user",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponseSwagger"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.AverageRatingResponse": {
            "type": "object",
            "properties": {
                "average_rating": {
                    "type": "number"
                },
                "reviewed_id": {
                    "type": "integer"
                },
                "total_reviews": {
                    "type": "integer"
                }
            }
        },
        "dto.CreateProposalRequest": {
            "type": "object",
            "required": [
                "bid_amount",
                "cover_letter",
                "currency",
                "job_id"
            ],
            "properties": {
                "bid_amount": {
                    "type": "integer",
                    "minimum": 0
                },
                "cover_letter": {
                    "type": "string",
                    "minLength": 10
                },
                "currency": {
                    "type": "string",
                    "enum": [
                        "IDR",
                        "USD",
                        "EUR"
                    ]
                },
                "job_id": {
                    "type": "integer"
                }
            }
        },
        "dto.CreateReviewRequest": {
            "type": "object",
            "required": [
                "comment",
                "rating",
                "reviewed_id"
            ],
            "properties": {
                "comment": {
                    "type": "string"
                },
                "rating": {
                    "type": "number",
                    "maximum": 5,
                    "minimum": 1
                },
                "reviewed_id": {
                    "description": "ID User yang akan diberikan review",
                    "type": "integer"
                }
            }
        },
        "dto.JobRequest": {
            "type": "object",
            "required": [
                "category",
                "currency",
                "deadline",
                "description",
                "experience_level",
                "job_type",
                "location",
                "salary",
                "skills",
                "title"
            ],
            "properties": {
                "category": {
                    "type": "string"
                },
                "currency": {
                    "type": "string",
                    "enum": [
                        "IDR",
                        "USD",
                        "EUR"
                    ]
                },
                "deadline": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "experience_level": {
                    "type": "string",
                    "enum": [
                        "junior",
                        "mid",
                        "senior"
                    ]
                },
                "job_type": {
                    "type": "string",
                    "enum": [
                        "full-time",
                        "part-time",
                        "freelance",
                        "internship"
                    ]
                },
                "location": {
                    "type": "string"
                },
                "salary": {
                    "type": "integer",
                    "minimum": 0
                },
                "skills": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "dto.JobResponse": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "company_id": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "deadline": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "experience_level": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "job_type": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "salary": {
                    "type": "integer"
                },
                "skills": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "dto.LoginResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.UserResponse"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "dto.MessageRequest": {
            "type": "object",
            "required": [
                "message",
                "receiver_id"
            ],
            "properties": {
                "message": {
                    "type": "string"
                },
                "receiver_id": {
                    "type": "integer"
                }
            }
        },
        "dto.ProposalResponse": {
            "type": "object",
            "properties": {
                "bid_amount": {
                    "type": "integer"
                },
                "cover_letter": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "freelancer": {
                    "type": "string"
                },
                "freelancer_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "job_id": {
                    "type": "integer"
                },
                "job_title": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "dto.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "full_name",
                "password",
                "role"
            ],
            "properties": {
                "avatar_url": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3
                },
                "password": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 8
                },
                "phone": {
                    "type": "string"
                },
                "role": {
                    "type": "string",
                    "enum": [
                        "admin",
                        "freelancer",
                        "perusahaan"
                    ]
                }
            }
        },
        "dto.ReviewResponse": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "rating": {
                    "type": "number"
                },
                "reviewed_id": {
                    "type": "integer"
                },
                "reviewer_id": {
                    "type": "integer"
                }
            }
        },
        "dto.SavedFreelancerResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "freelancer_id": {
                    "type": "integer"
                },
                "full_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "dto.SavedJobResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "job_id": {
                    "type": "integer"
                },
                "job_title": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateJobRequest": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "currency": {
                    "type": "string",
                    "enum": [
                        "IDR",
                        "USD",
                        "EUR"
                    ]
                },
                "deadline": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "experience_level": {
                    "type": "string",
                    "enum": [
                        "junior",
                        "mid",
                        "senior"
                    ]
                },
                "job_type": {
                    "type": "string",
                    "enum": [
                        "full-time",
                        "part-time",
                        "freelance",
                        "internship"
                    ]
                },
                "location": {
                    "type": "string"
                },
                "salary": {
                    "type": "integer"
                },
                "skills": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateReviewRequest": {
            "type": "object",
            "required": [
                "comment",
                "rating"
            ],
            "properties": {
                "comment": {
                    "type": "string"
                },
                "rating": {
                    "type": "number",
                    "maximum": 5,
                    "minimum": 1
                }
            }
        },
        "dto.UserResponse": {
            "type": "object",
            "properties": {
                "avatar_url": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "phone": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.ChatMessage": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "receiver_id": {
                    "type": "integer"
                },
                "sender_id": {
                    "type": "integer"
                }
            }
        },
        "models.Notification": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_read": {
                    "type": "boolean"
                },
                "message": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "utils.ErrorResponseSwagger": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Masukkan token dalam format \"Bearer \u003ctoken\u003e\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Jobseeker Management API",
	Description:      "API untuk manajemen jobseeker",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
